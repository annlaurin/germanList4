})
by(newdata[, 11:14], newdata$ROI, function(t,c){
targ <- sum(t)
#comp <- sum(c)
})
aggregate( . ~ Species, iris, mean)
aggregate( . ~ ROI, newdata, mean)
aggregate( t ~ ROI, newdata, mean)
aggregate( t,c ~ ROI, newdata, mean)
aggregate( t&c ~ ROI, newdata, mean)
aggregate( t ~ ROI, newdata, mean)
aggregate( t ~ ROI+itme, newdata, mean)
aggregate( t ~ ROI+item, newdata, mean)
aggregate( t ~ ROI+trial, newdata, mean)
aggregate( t+c ~ ROI+trial, newdata, mean)
aggregate( t ~ ROI+trial, newdata, mean)
aggregate( t ~ ROI+trial+subject, newdata, mean)
aggregate( t ~ (ROI&t8+ROI$t9)+trial+subject, newdata, mean)
aggregate( t ~ (t8+t9)+trial+subject, newdata, mean)
aggregate( t ~ ROI+trial+subject, newdata, mean)
aggregate( c ~ ROI+trial+subject, newdata, mean)
aggregate( c ~ trial+subject, newdata, mean)
aggregate( c,t ~ trial+subject, newdata, mean)
aggregate( cbind(c,t,f2,f3) ~ trial+subject, newdata, mean)
aggregate( cbind(t,c,f2,f3) ~ trial+subject, newdata, mean)
answers <- aggregate(cbind(t,c,f2,f3) ~ trial+subject, newdata, mean)
answers
answers[1,]
answers[2,]
answers[1-2,]
answers[1:5,]
answers[1:5,4]
answers <- aggregate(cbind(t,c,f2,f3) ~ trial+subject, newdata, sum)
answers
answers$t
for (i in 1:length(answers)) {
if ( (answers$t[i] > answers$c[i]) & (answers$t[i] > answers$f2[i]) & (answers$t[i] > answers$f3[i])) {
acc[i] = 1
} else {
acc[i] = 0}
}
acc = NULL
for (i in 1:length(answers)) {
if ( (answers$t[i] > answers$c[i]) & (answers$t[i] > answers$f2[i]) & (answers$t[i] > answers$f3[i])) {
acc[i] = 1
} else {
acc[i] = 0}
}
acc
for (i in 1:length(answers$t)) {
if ( (answers$t[i] > answers$c[i]) & (answers$t[i] > answers$f2[i]) & (answers$t[i] > answers$f3[i])) {
acc[i] = 1
} else {
acc[i] = 0}
}
acc
answers <- cbind(answers, acc)
answers
acc = NULL
for (i in 1:length(answers$t)) {
if ( (answers$t[i] > answers$c[i]) & (answers$t[i] > answers$f2[i]) & (answers$t[i] > answers$f3[i])) {
acc[i] = 1
} else {
acc[i] = 0}
}
answers <- cbind(answers, acc)
head(answes, n=30)
head(answers, n=30)
acc.val = 0
subj.val = 0
trial.val = 0
for (i in 1:length(answers$t)) {
acc.val[i] = acc[i]
subj.val[i] =subject[i]
subj.val[i] =trial[i]
}
acc
acc.val = 0
subj.val = 0
trial.val = 0
for (i in 1:length(answers$t)) {
acc.val[i] = acc[i]
subj.val[i] = answers$subject[i]
subj.val[i] =trial[i]
}
acc.val = 0
subj.val = 0
trial.val = 0
for (i in 1:length(answers$t)) {
acc.val[i] = answers$acc[i]
subj.val[i] = answers$subject[i]
subj.val[i] = answers$trial[i]
}
acc.val
accuracy = NULL
acc.val = 0
subj.val = 0
trial.val = 0
for (i in 1:length(answers$t)) {
acc.val[i] = answers$acc[i]
subj.val[i] = answers$subject[i]
trial.val[i] = answers$trial[i]
for (j in 1:length(data_all$t)) {
if (
data_all$subject[j] == subj.val[i]
data_all$trial[j] == trial.val[i]) {
accuracy[j] = acc.val[i]
}
}
data_all$subject
accuracy = NULL
acc.val = 0
subj.val = 0
trial.val = 0
for (i in 1:length(answers$t)) {
acc.val[i] = answers$acc[i]
subj.val[i] = answers$subject[i]
trial.val[i] = answers$trial[i]
for (j in 1:length(data_all$t)) {
if (
data_all$subject[j] == subj.val[i]
data_all$trial[j] == trial.val[i]) {
accuracy[j] = acc.val[i]
}
}
accuracy = NULL
acc.val = 0
subj.val = 0
trial.val = 0
for (i in 1:length(answers$t)) {
acc.val[i] = answers$acc[i]
subj.val[i] = answers$subject[i]
trial.val[i] = answers$trial[i]
for (j in 1:length(data_all$subject)) {
if (
data_all$subject[j] == subj.val[i]
data_all$trial[j] == trial.val[i]) {
accuracy[j] = acc.val[i]
}
}
accuracy = NULL
acc.val = 0
subj.val = 0
trial.val = 0
for (i in 1:length(answers$t)) {
acc.val[i] = answers$acc[i]
subj.val[i] = answers$subject[i]
trial.val[i] = answers$trial[i]
for (j in 1:length(data_all$subject)) {
if (
data_all$subject[j] == subj.val[i];
data_all$trial[j] == trial.val[i]) {
accuracy[j] = acc.val[i]
}
}
accuracy = NULL
acc.val = 0
subj.val = 0
trial.val = 0
for (i in 1:length(answers$t)) {
acc.val[i] = answers$acc[i]
subj.val[i] = answers$subject[i]
trial.val[i] = answers$trial[i]
for (j in 1:length(data_all$subject)) {
if ((data_all$subject[j] == subj.val[i]) & (data_all$trial[j] == trial.val[i])) {
accuracy[j] = acc.val[i]
}
}
}
accuracy
data_all.new <- cbind(data_all, accuracy)
head(data_all.new, n=50)
head(data_all.new, n=10)
drops <- c("response","response")
data_all.new <- data_all.new[,!(names(data_all.new) %in% drops)]
head(data_all.new, n=10)
tail(data_all.new, n=10)
head(data_all.new, n=10)
answers
data_all.new[data_all.new$subject == 47,]
data_all.new[data_all.new$subject == 47 & data_all.new&trial==21,]
data_all.new[data_all.new$subject == 47 & data_all.new&item==21,]
data_all.new[data_all.new$subject == '47' & data_all.new&item=='21',]
data_all.new[data_all.new&item==21,]
data_all.new[data_all.new&trial==21,]
data_all.new[data_all.new$trial==21,]
data_all.new[data_all.new$subject == '47' & data_all.new$trial=='21',]
head(data_all.new[data_all.new$subject == '47' & data_all.new$trial=='21',])
tail(data_all.new[data_all.new$subject == '47' & data_all.new$trial=='21',])
tail(data_all.new[data_all.new$subject == '41' & data_all.new$trial=='21',])
head(data_all.new[data_all.new$subject == '41' & data_all.new$trial=='21',])
head(data_all.new[data_all.new$subject == '47' & data_all.new$trial=='10',])
tail(data_all.new[data_all.new$subject == '47' & data_all.new$trial=='10',])
tail(data_all.new[data_all.new$subject == '52' & data_all.new$trial=='16',])
head(data_all.new[data_all.new$subject == '52' & data_all.new$trial=='16',])
answers <- aggregate (cbind(t,c,f2,f3) ~ group+condition+preference+ROI, data_all, sum)
answers
by.cond <- aggregate (cbind(t,c,f2,f3) ~ group+condition+ROI, data_all, sum)
by.cond
by.pref <- aggregate (cbind(t,c,f2,f3) ~ group+preference+ROI, data_all, sum)
dy.pref
by.pref
targ <- data_all[data_all$preference =='targ',]
targ.by.pref <- aggregate (cbind(t,c,f2,f3) ~ group+ROI, targ, sum)
targ.by.pref
comp <- data_all[data_all$preference =='comp',]
comp.by.pref <- aggregate (cbind(t,c,f2,f3) ~ group+ROI, comp, sum)
comp.by.pref
short <- data_all[data_all$condition =='short',]
long <- data_all[data_all$condition =='long',]
short.cond <- aggregate (cbind(t,c,f2,f3) ~ group+ROI, short, sum)
long.cond <- aggregate (cbind(t,c,f2,f3) ~ group+ROI, long, sum)
long.cond
short.cond
q()
load(url("http://is.gd/refnet"))
load(url("http://is.gd/refnet"))
getwd()
library("bitops", lib.loc="~/R/i686-pc-linux-gnu-library/3.1")
detach("package:bitops", unload=TRUE)
library("Cairo", lib.loc="~/R/i686-pc-linux-gnu-library/3.1")
library("car", lib.loc="~/R/i686-pc-linux-gnu-library/3.1")
detach("package:car", unload=TRUE)
detach("package:Cairo", unload=TRUE)
library("Cairo", lib.loc="~/R/i686-pc-linux-gnu-library/3.1")
detach("package:Cairo", unload=TRUE)
install.packages(c("boot", "ca", "Cairo", "car", "cluster", "codetools", "colorspace", "digest", "e1071", "foreach", "formatR", "Formula", "ggplot2", "gld", "gss", "gvlma", "hexbin", "Hmisc", "influence.ME", "iterators", "labeling", "languageR", "lattice", "LMERConvenienceFunctions", "markdown", "MASS", "mclust", "metafor", "mgcv", "minqa", "multcomp", "munsell", "mvtnorm", "nlme", "nnet", "plyr", "RCurl", "reshape2", "rms", "Rttf2pt1", "scales", "SparseM", "vcd", "xkcd", "xtable"))
library("BsMD", lib.loc="~/R/i686-pc-linux-gnu-library/3.1")
detach("package:BsMD", unload=TRUE)
pnorm(93, mean = 100, sd = 10)
qnorm(95, mean = 100, sd = 10)
qnorm(0.95, mean = 100, sd = 10)
qnorm(0.95, mean = 100, sd = 10)
qnorm(.95, mean = 100, sd = 10 / sqrt(50)
)
pbinom(5, size = 6, p = 0.5)
pbinom(5, size = 12, p = 0.5)
pbinom(4, prob = .5, size = 6, lower.tail = FALSE)
pbinom(5, prob = .5, size = 6)
pbinom(4, prob = .5, size = 6)
1 - pbinom(4, prob = .5, size = 6)
punif(0.51, min=0, max=1, lower.tail = TRUE, log.p = FALSE)
punif(0.51, mean = 0.5, sd = sqrt(12) / sqrt(100), min=0, max=1, lower.tail = TRUE, log.p = FALSE)
1 - pnorm(0.51, mean = 0.5, sd = sqrt(12) / sqrt(100), lower.tail = TRUE)
round(pnorm(.51, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE)
)
pnorm(.51, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE)
ppois(20, lambda = 16.5*2, lower.tail = TRUE)
p <- c(.1, .2, .3, .4)
x <- 2 : 5
plot(p,x)
plot(p,x,  lwd = 3, frame = FALSE, type = "l"))
plot(p,x,  lwd = 3, frame = FALSE, type = "l")
plot(p, x, frame = FALSE, type = "l")
plot(x, p, frame = FALSE, type = "l")
pnorm(70, mean = 80, sd= 10)
qnorm(0.95, mean = 1100, sd= 75)
qnorm(0.95, mean = 1100, sd= 75/sqrt(100))
pbinom(4, 5, p = 0.5, )
?pbinom
pbinom(4, 5, p = 0.5, lower.tail = FALSE)
ppois(10, lambda = 3*5)
15 + c(-1, 1) * qnorm(0.975) * 10/sqrt(100)
15 + c(-1, 1) * qnorm(0.995) * 10/sqrt(100)
15 + c(-1, 1) * qnorm(0.998) * 10/sqrt(100)
15 + c(-1, 1) * qnorm(0.9) * 10/sqrt(100)
15 + c(-1, 1) * qnorm(0.8) * 10/sqrt(100)
15 + c(-1, 1) * qnorm(0.68) * 10/sqrt(100)
15 + c(-1, 1) * qnorm(0.95) * 10/sqrt(104)
15 + c(-1, 1) * qnorm(0.98) * 10/sqrt(104)
pbinom(4, size = 5, prob = 0.5, lower.tail = FALSE)
pbinom(4, size = 5, prob = 0.5)
1 - pbinom(4, size = 5, prob = 0.5)
1 - pbinom(1, size = 5, prob = 0.5)
pbinom(1, size = 5, prob = 0.5)
pbinom(4, size = 5, prob = 0.5, lower.tail = FALSE)
pbinom(4, size = 5, prob = 0.5, lower.tail = TRUE)
dnorm(0, mean = 0, sd = 1)
dnorm(1, mean = 0, sd = 1)
dnorm(0.1, mean = 0, sd = 1)
dnorm(0.2, mean = 0, sd = 1)
dnorm(-0.2, mean = 0, sd = 1)
pnorm(610,mean=600,sd=sqrt(50))-pnorm(590,mean=600,sd=sqrt(50)
)
x<-rnorm(1,mean=600,sd=sqrt(50))
x
dnorm(x, mean = 400, sd = sqrt(50))
dnorm(x, mean = 500, sd = sqrt(50))
dnorm(x, mean = 600, sd = sqrt(50))
dnorm(x, mean = 700, sd = sqrt(50))
dnorm(x, mean = 620, sd = sqrt(50))
dnorm(x, mean = 580, sd = sqrt(50))
dnorm(x, mean = 590, sd = sqrt(50))
dnorm(x, mean = 595, sd = sqrt(50))
x<-rnorm(10,mean=600,sd=sqrt(50))
dnorm(x, mean = 500, sd = sqrt(50))
dnorm(x, mean = 600, sd = sqrt(50))
sum(dnorm(x, mean = 600, sd = sqrt(50)), log = T)
sum(dnorm(x, mean = 500, sd = sqrt(50)), log = T)
sum(dnorm(x, mean = 400, sd = sqrt(50)), log = T)
sum(dnorm(x, mean = 200, sd = sqrt(50)), log = T)
sum(dnorm(x, mean = 620, sd = sqrt(50)), log = T)
sum(dnorm(x, mean = 650, sd = sqrt(50)), log = T)
sum(dnorm(x, mean = 550, sd = sqrt(50)), log = T)
sum(dnorm(x, mean = 560, sd = sqrt(50)), log = T)
sum(dnorm(x, mean = 570, sd = sqrt(50)), log = T)
sum(dnorm(x, mean = 580, sd = sqrt(50)), log = T)
sum(dnorm(x, mean = 590, sd = sqrt(50)), log = T)
sum(dnorm(x, mean = 595, sd = sqrt(50)), log = T)
sum(dnorm(x, mean = 600, sd = sqrt(50)), log = T)
dbinom(x=46,size=100,0.4)
dbinom(x=46,size=100,0.46)
dbinom(x=46,size=100,0.5)
dbinom(x=46,size=100,0.6)
theta<-seq(0,1,by=0.01)
plot(theta,dbinom(x=46,size=100,theta),
xlab=expression(theta),type="l")
plot(theta,dbinom(x=46,size=100,theta),
xlab=expression(theta),type="l")
plot(beta,dbinom(x=46,size=100,theta),
xlab=expression(theta),type="l")
plot(theta,dbinom(x=46,size=100,theta),
xlab=expression(theta),type="l")
qbeta(0.5,shape1=589,shape2=611,lower.tail=FALSE)
install.packages("rjags")
install.packages("rjags" --with-jags-include)
x <- rnorm(10000, mean = 600, sd = sqrt(50))
mean(x < 590)
length(x < 590)
head(x)
length(x[x < 590])
808/10000=
)
808/10000
x <- rnorm(10000, mean = 600, sd = sqrt(50))
mean(x < 590)
mean(x)
qnorm(0.125, lower.tail=FALSE)
qnorm(0.125, lower.tail= FALSE)
install.packahes("rjags")
install.packages("rjags")
install.packages("coda")
install.packages("rjags")
install.packages('rjags',
configure.args=c(rjags='--with-jags-include=$JAGSHOME/include/JAGS
--with-jags-lib=$JAGSHOME/lib'))
module load jags
install.packages("rjags")
install.packages(c("DoE.base", "fBasics", "highr", "knitr", "mclust", "minqa", "nlme", "pcaPP", "rms", "timeDate", "timeSeries"))
library(rstan)
library(rjags)
library(rjags)
data<-list(x=c(8,15,22,29,36),
y=c(177,236,285,350,376))
data
plot(data$x, data$y)
lm_summary_rats<-summary(fm<-lm(y~x,data))
lm_summary_rats
cat("
model
{
## specify model for data:
for(i in 1:5){
y[i] ~ dnorm(mu[i],tau)
mu[i] <- beta0 + beta1 * (x[i]-mean(x[]))
}
# priors:
beta0 ~ dunif(-500,500)
beta1 ~ dunif(-500,500)
tau <- 1/sigma2
sigma2 <-pow(sigma,2)
sigma ~ dunif(0,200)
}",
file = "~/Documents/Science/Potsdam/Bayes/JAGSmodels/ratsexample2.jag" )
track.variables<-c("beta0","beta1","sigma")
rats.mod <- jags.model(
file = "~/Documents/Science/Potsdam/Bayes/JAGSmodels/rats.jag",
data=data,
n.chains = 1,
n.adapt =2000,
quiet=T)
rats.mod <- jags.model(
file = "~/Documents/Science/Potsdam/Bayes/JAGSmodels/ratsexample2.jag",
data=data,
n.chains = 1,
n.adapt =2000,
quiet=T)
summary(rats.mod)
rats.res <- coda.samples(rats.mod,
var = track.variables,
n.iter = 2000,
thin = 1 )
summary(rats.res)$statistics[,1:2],digits=2)
summary(rats.res)$statistics[,1:2]
summary(rats.res)$quantiles[,c(1,3,5)]
library(languageR)
head(lexdec)
library(rjags)
data<-lexdec[,c(1,2,3,4,5)]
head(data)
contrasts(data$NativeLanguage)<-contr.sum(2)
contrasts(data$Sex)<-contr.sum(2)
lm_summary_lexdec<-summary(fm<-lm(RT~scale(Trial,scale=F)+
NativeLanguage+Sex,data))
round(lm_summary_lexdec$coef,digits=2)
dat<-list(y=data$RT,
Trial=(data$Trial-mean(data$Trial)),
Lang =data$NativeLanguage,
Sex=data$Sex)
head(dat)
dat<-list(y=data$RT,
Trial = (data$Trial-mean(data$Trial)),
Lang = ifelse(data$NativeLanguage == English, 1, 0)
Sex = ifelse(data$Sex == F, 1, 0))
dat<-list(y=data$RT,
Trial = (data$Trial-mean(data$Trial)),
Lang = ifelse(data$NativeLanguage == "English", 1, 0)
Sex = ifelse(data$Sex == "F", 1, 0))
dat<-list(y=data$RT,
Trial = (data$Trial-mean(data$Trial)),
Lang = ifelse(data$NativeLanguage == "English", 1, 0),
Sex = ifelse(data$Sex == "F", 1, 0))
head(dat)
dat<-list(y=data$RT,
Trial = (data$Trial-mean(data$Trial)),
Lang = ifelse(data$NativeLanguage == "English", 1, -1),
Sex = ifelse(data$Sex == "F", 1, -1))
head(dat)
cat("
model
{
## specify model for data:
for(i in 1:1659){
y[i] ~ dnorm(mu[i],tau)
mu[i] <- beta0 +
beta1 * Trial[i]+
beta2 * Lang[i] + beta3 * Sex[i]
}
# priors:
beta0 ~ dunif(-10,10)
beta1 ~ dunif(-5,5)
beta2 ~ dunif(-5,5)
beta3 ~ dunif(-5,5)
tau <- 1/sigma2
sigma2 <-pow(sigma,2)
sigma ~ dunif(0,200)
}",
file="~/Documents/Science/Potsdam/Bayes/JAGSmodels/multregexample1.jag")
track.variables<-c("beta0","beta1",
"beta2","beta3","sigma")
lexdec.mod <- jags.model(
file = "JAGSmodels/multregexample1.jag",
data=dat,
n.chains = 1,
n.adapt =2000,
quiet=T)
lexdec.mod <- jags.model(
file = "~/Documents/Science/Potsdam/Bayes/JAGSmodels/multregexample1.jag",
data=dat,
n.chains = 1,
n.adapt =2000,
quiet=T)
exdec.res <- coda.samples( lexdec.mod,
var = track.variables,
n.iter = 3000)
round(summary(exdec.res)$statistics[,1:2],
digits=2)
round(summary(exdec.res)$quantiles[,c(1,3,5)],
digits=2)
dat<-list(y=data$RT,
Trial = (data$Trial-mean(data$Trial)),
Lang = ifelse(data$NativeLanguage == "English", 1, -1),
Sex = ifelse(data$Sex == "F", 1, -1))
cat("
model
{
## specify model for data:
for(i in 1:1659){
y[i] ~ dnorm(mu[i],tau)
mu[i] <- beta0 +
beta1 * Trial[i]+
beta2 * Lang[i] + beta3 * Sex[i]
}
# priors:
beta0 ~ dnorm(0,10)
beta1 ~ dnorm(0,5)
beta2 ~ dnorm(0,5)
beta3 ~ dnorm(0,5)
tau <- 1/sigma2
sigma2 <-pow(sigma,2)
sigma ~ dunif(0,200)
}",
file="~/Documents/Science/Potsdam/Bayes/JAGSmodels/multregexample1.jag")
lexdec.mod <- jags.model(
file = "~/Documents/Science/Potsdam/Bayes/JAGSmodels/multregexample1.jag",
data=dat,
n.chains = 1,
n.adapt =2000,
quiet=T)
lexdec.res <- coda.samples( lexdec.mod,
var = track.variables,
n.iter = 3000)
round(summary(lexdec.res)$statistics[,1:2],
digits=2)
binom.test(7,21)
binom.test(6,21)
library(rstan)
library(RStan)
setwd("~/Documents/Science/Russian_number/repo/list3")
source("getresults.R")
setwd("~/Documents/Science/Russian_number/repo/list4")
source("getresults.R")
